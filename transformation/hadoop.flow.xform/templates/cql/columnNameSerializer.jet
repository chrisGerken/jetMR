<%-- This code copyright Gerken Intellectual Properties LLC --%>
<c:include template="templates/common/javaHeader.jet"/>
package <c:get select="$artifact/@cassandraPlatformPkg" />;

import static me.prettyprint.hector.api.ddl.ComparatorType.BYTESTYPE;

import java.nio.ByteBuffer;
import java.util.Hashtable;

import org.apache.thrift.TBaseHelper;

import <c:get select="$artifact/@writablesPkg" />.<c:get select="$writable/@writableJava" />;

import me.prettyprint.cassandra.serializers.*;
import me.prettyprint.hector.api.beans.AbstractComposite.ComponentEquality;
import me.prettyprint.hector.api.beans.Composite;
import me.prettyprint.hector.api.ddl.ComparatorType;

/**
 * Converts bytes to <c:get select="$writable/@writableJava" /> column names and back again
 * 
 */
public final class <c:get select="$columnFamily/@cassandraColumnNameSerializerType" /> extends AbstractSerializer<<c:get select="$writable/@writableJava" />> {

  private static final Hashtable<String, <c:get select="$columnFamily/@cassandraColumnNameSerializerType" />> instances = new Hashtable<String, <c:get select="$columnFamily/@cassandraColumnNameSerializerType" />>(); 
  
  private String forColumn;

  private <c:get select="$columnFamily/@cassandraColumnNameSerializerType" />(String columnName) {
	  super();
	  forColumn = columnName;  
  }
  
  private static <c:get select="$columnFamily/@cassandraColumnNameSerializerType" /> get(String columnName) {
	  <c:get select="$columnFamily/@cassandraColumnNameSerializerType" /> ser = instances.get(columnName);
	  if (ser == null) {
		  ser = new <c:get select="$columnFamily/@cassandraColumnNameSerializerType" />(columnName);
	  }
    return ser;
  }
  
<c:iterate select="$writable/*[@isProperty='true']" var="property">
<c:if test="not($columnFamily/clusteringKey[@name=$property/@name])" >
<c:if test="not($columnFamily/@rowKey!=$property/@name)" >
  public static <c:get select="$columnFamily/@cassandraColumnNameSerializerType" /> <c:get select="$property/@name" />() {
      return get("<c:get select="$property/@name" />");
  }
  
</c:if>
</c:if>
</c:iterate>
  @Override
  public ByteBuffer toByteBuffer(<c:get select="$writable/@writableJava" /> obj) {
    if (obj == null) {
      return null;
    }
	Composite composite = new Composite();
<c:setVariable select=" 0 " var="index" />	
<c:iterate select="$columnFamily/clusteringKey" var="clusteringKey" >
<c:setVariable select="$writable/*[@name=$clusteringKey/@name]" var="property" />
	composite.addComponent(<c:get select="$index" />, obj.<c:get select="$property/@getter" />() , <c:get select="$property/@cassandraCompositeSerializerType" />.get(), "<c:get select="$property/@cassandraComparatorType" />", ComponentEquality.EQUAL);
<c:setVariable select=" $index + 1 " var="index" />	
</c:iterate>

	composite.addComponent(<c:get select="$index" />, forColumn , StringSerializer.get(), "UTF8Type", ComponentEquality.EQUAL);
	ByteBuffer byteBuffer = new CompositeSerializer().toByteBuffer(composite);
	return byteBuffer;
  }

  @Override
  public <c:get select="$writable/@writableJava" /> fromByteBuffer(ByteBuffer byteBuffer) {
    if (byteBuffer == null) {
      return null;
    }
	<c:get select="$writable/@writableJava" /> obj = new <c:get select="$writable/@writableJava" />();
	Composite decomposed = new CompositeSerializer().fromByteBuffer(TBaseHelper.rightSize(byteBuffer));
<c:setVariable select=" 0 " var="index" />	
<c:iterate select="$columnFamily/clusteringKey" var="clusteringKey" >
<c:setVariable select="$writable/*[@name=$clusteringKey/@name]" var="property" />
	obj.<c:get select="$property/@setter" />(decomposed.get(<c:get select="$index" />, <c:get select="$property/@cassandraCompositeSerializerType" />.get()));
<c:setVariable select=" $index + 1 " var="index" />	
</c:iterate>
	return obj;
  }

  public String columnNameFrom(ByteBuffer byteBuffer) {
    if (byteBuffer == null) {
      return null;
    }
	Composite decomposed = new CompositeSerializer().fromByteBuffer(TBaseHelper.rightSize(byteBuffer));
<c:setVariable select=" 0 " var="index" />	
<c:iterate select="$columnFamily/clusteringKey" var="clusteringKey" >
<c:setVariable select="$writable/*[@name=$clusteringKey/@name]" var="property" />
	decomposed.get(<c:get select="$index" />, <c:get select="$property/@cassandraCompositeSerializerType" />.get());
<c:setVariable select=" $index + 1 " var="index" />	
</c:iterate>
	return decomposed.get(<c:get select="$index" />, StringSerializer.get());
  }

  @Override
  public ComparatorType getComparatorType() {
    return BYTESTYPE;
  }

}
